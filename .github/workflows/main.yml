name: RDP

on:
  workflow_dispatch:

env:
  TAILSCALE_VERSION: 1.88.4

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Enable RDP & Firewall
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0

          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service TermService -Force

      - name: Create RDP User
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper = [char[]](65..90)
            Lower = [char[]](97..122)
            Number = [char[]](48..57)
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV
          echo "::add-mask::User: RDP | Password: $password"

      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-$env:TAILSCALE_VERSION-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Connect to Tailscale
        shell: pwsh
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" logout

          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID

          # Get valid Tailscale IP
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
              $ipList = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              foreach ($ip in $ipList) {
                  if ($ip -match "^100\.") {
                      $tsIP = $ip
                      break
                  }
              }
              Start-Sleep -Seconds 5
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "❌ Tailscale IP not found! Got: $ipList"
              & "$env:ProgramFiles\Tailscale\tailscale.exe" status
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "::add-mask::$tsIP"

      - name: Debug RDP Services
        shell: pwsh
        run: |
          Write-Host "`n--- RDP Service Status ---"
          Get-Service TermService

          Write-Host "`n--- Listening on Port 3389 ---"
          netstat -an | findstr ":3389"

          Write-Host "`n--- Firewall Rule ---"
          netsh advfirewall firewall show rule name="RDP-Tailscale"

          Write-Host "`n--- TCP Connections ---"
          Get-NetTCPConnection -LocalPort 3389

          Write-Host "`n--- Logged-in User ---"
          quser

      - name: Verify RDP Access via Tailscale
        shell: pwsh
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "❌ TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "✅ TCP connectivity to port 3389 is successful!"

      - name: ✅ Ready for RDP – Keep Runner Alive
        shell: pwsh
        run: |
          Write-Host "`n==============================="
          Write-Host "     ✅ RDP READY ✅"
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "$env:RDP_CREDS"
          Write-Host "==============================="

          # Keep the runner alive
          while ($true) {
              Write-Host "[$(Get-Date)] Session alive... waiting for RDP connection"
              Start-Sleep -Seconds 300
          }
